// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CommitToChannelHandlerFunc turns a function with the right signature into a commit to channel handler
type CommitToChannelHandlerFunc func(CommitToChannelParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CommitToChannelHandlerFunc) Handle(params CommitToChannelParams) middleware.Responder {
	return fn(params)
}

// CommitToChannelHandler interface for that can handle valid commit to channel params
type CommitToChannelHandler interface {
	Handle(CommitToChannelParams) middleware.Responder
}

// NewCommitToChannel creates a new http.Handler for the commit to channel operation
func NewCommitToChannel(ctx *middleware.Context, handler CommitToChannelHandler) *CommitToChannel {
	return &CommitToChannel{Context: ctx, Handler: handler}
}

/*CommitToChannel swagger:route POST /commit commitToChannel

Commit a ethereum signed message to a channel

Send and commit a valid signed ethereum message

*/
type CommitToChannel struct {
	Context *middleware.Context
	Handler CommitToChannelHandler
}

func (o *CommitToChannel) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCommitToChannelParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
