// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SignOffCommitHandlerFunc turns a function with the right signature into a sign off commit handler
type SignOffCommitHandlerFunc func(SignOffCommitParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SignOffCommitHandlerFunc) Handle(params SignOffCommitParams) middleware.Responder {
	return fn(params)
}

// SignOffCommitHandler interface for that can handle valid sign off commit params
type SignOffCommitHandler interface {
	Handle(SignOffCommitParams) middleware.Responder
}

// NewSignOffCommit creates a new http.Handler for the sign off commit operation
func NewSignOffCommit(ctx *middleware.Context, handler SignOffCommitHandler) *SignOffCommit {
	return &SignOffCommit{Context: ctx, Handler: handler}
}

/*SignOffCommit swagger:route POST /publish signOffCommit

Sign-off a partially ethereum signed message to a channel

Sign-off and commit a valid signed ethereum message

*/
type SignOffCommit struct {
	Context *middleware.Context
	Handler SignOffCommitHandler
}

func (o *SignOffCommit) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSignOffCommitParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
