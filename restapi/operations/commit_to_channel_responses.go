// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Magicking/protochannel/models"
)

// CommitToChannelOKCode is the HTTP code returned for type CommitToChannelOK
const CommitToChannelOKCode int = 200

/*CommitToChannelOK commit to channel o k

swagger:response commitToChannelOK
*/
type CommitToChannelOK struct {
}

// NewCommitToChannelOK creates CommitToChannelOK with default headers values
func NewCommitToChannelOK() *CommitToChannelOK {
	return &CommitToChannelOK{}
}

// WriteResponse to the client
func (o *CommitToChannelOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*CommitToChannelDefault Unexpected error

swagger:response commitToChannelDefault
*/
type CommitToChannelDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCommitToChannelDefault creates CommitToChannelDefault with default headers values
func NewCommitToChannelDefault(code int) *CommitToChannelDefault {
	if code <= 0 {
		code = 500
	}

	return &CommitToChannelDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the commit to channel default response
func (o *CommitToChannelDefault) WithStatusCode(code int) *CommitToChannelDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the commit to channel default response
func (o *CommitToChannelDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the commit to channel default response
func (o *CommitToChannelDefault) WithPayload(payload *models.Error) *CommitToChannelDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the commit to channel default response
func (o *CommitToChannelDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CommitToChannelDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
